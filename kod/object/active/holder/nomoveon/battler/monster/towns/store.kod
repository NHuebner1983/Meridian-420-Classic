// Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
// All rights reserved.
//
// This software is distributed under a license that is described in
// the LICENSE file that accompanies it.
//
// Meridian is a registered trademark.


////////////////////////////////////////////////////////////////////////////////
Store is Towns

constants:

   include blakston.khd

resources:

   Store_name_rsc = "Store Catalog"
   Store_icon_rsc = jbook.bgf
   Store_desc_rsc = \
      "A large store catalog placed by a fellow Meridianite.  "
	  "Feel free to browse the list of items to purchase, the "
	  "item will be immediatly given to you and the owner will "
	  "receive his payment instantly!  "

classvars:

   vrName = Store_name_rsc
   vrIcon = Store_icon_rsc
   vrDesc = Store_desc_rsc

   viAttributes = \
      MOB_NOFIGHT | MOB_RANDOM | MOB_LISTEN \
      | MOB_NOMOVE | MOB_BUYER | MOB_SELLER \
	  | MOB_SHOP
   viOccupation = MOB_ROLE_MERCHANT
   viMerchant_markup = MERCHANT_RIPOFF

   // We sell what other people have given us
   vbSellFromInventory = TRUE

properties:

   poStoreOwner = $

messages:

   UserEntered(who=$)
   {
      if NOT Send(who,@GetFaction) = FACTION_NEUTRAL
      {
         Send(self,@SetMood,#new_mood=piMood+4);
      }

      propagate;
   }

   AffectMood(what=$,why=$)
   {
      if why = MOODMOD_DAWN
      {
         Send(self,@SetMood,#new_mood=piMood+1);
         
         return;
      }

      if why = MOODMOD_DUSK
      {
         Send(self,@SetMood,#new_mood=piMood+3);

         return;
      }

      return;
   }

   SetForSale()
   {
      local i, oJunk, lForSale;

      lForSale = $;
      Send(self,@NewHold,#what=oJunk);

      plFor_sale = [ lForSale,$,$ ];

      return;
   }


 CanAcceptOffer(who=$)
   {
      return (who = poStoreOwner) OR IsClass(who,&DM);
   }

   ReqOffer(what = $)
   {
      if (what = poStoreOwner) OR IsClass(what,&DM)
      {
         return TRUE;
      }

      return FALSE;
   }

   Offer(what = $)
   {
      if (what = poStoreOwner) OR IsClass(what,&DM)
      {
         Send(what,@CounterOffer,#item_list=$);
      }

      return;
   }
   
   AcceptOffer()
   "Transfer the purchased merchandise - MOB_BUYER"
   {
      local i,j,oHolder,lTake_items, bHadSomeNum, lForSale;

      lForSale = First(plFor_Sale);
      // Set the stuff where the user can get to it.
      oHolder = Send(SYS,@GetSystemHolder2);
      foreach i in plOffer_items
      {
         Send(oHolder,@NewHold,#what=i);
      }

      // Take stuff the user put there.
      oHolder = Send(SYS,@GetSystemHolder1);
      foreach lTake_items in [ Send(oHolder,@GetHolderActive),
                           Send(oHolder,@GetHolderPassive) ]
      {
         foreach i in lTake_items
         {
            Send(self,@NewHold,#what=i);
            if IsClass(i,&NumberItem)
            {
               bHadSomeNum = FALSE;
               foreach j in lForSale
               {
                  lForSale = Cons(i,lForSale);
               }
            }
            else
            {
               // If this is a spell item, then stop the go bad timer.
               if IsClass(i,&SpellItem)
               {
                  Send(i,@StopGoBadTimer);
               }

               lForSale = Cons(i,lForSale);
            }
         }
      }

      // kill the cancel offer timer
      SetNth(plFor_Sale,1,lForSale);
      Send(self,@OfferCanceled);

      return TRUE;
   }
   
   ObjectDesired(what=$,report=TRUE)
   "This is set in individual buyers.  It allows them to pick and choose"
   "what they want to buy."
   {
      local i;

      if Send(what,@HasAttribute,#ItemAtt=IA_BONDED)
         OR Send(what,@IsItemType,#type=ITEMTYPE_SPECIAL)
      {
         return FALSE;
      }

      if IsClass(what,&Token) OR IsClass(what,&Totem)
      {
         return FALSE;
      }

      return TRUE;
   }
   
   NewHoldObject(what=$)
   {
      local oOwner;

      oOwner = Send(what,@GetOwner);

      if oOwner <> $
      {
         Send(poOwner,@LeaveHold,#what=what);
         Send(what,@NewOwner,#what=$);
      }

      return;
   }
   
   SetStoreOwner(oStoreOwner=$)
   {
      poStoreOwner = oStoreOwner;

      return;
   }
   
   GetStoreOwner()
   {
      return poStoreOwner;
   }
   
end
////////////////////////////////////////////////////////////////////////////////
